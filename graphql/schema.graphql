"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Indicates what fields are available at the top level of a query operation."
type Query {
    "Find a single user by an identifying attribute."
    user(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

      "Search by email address."
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
      orderBy: _ @orderBy(columns: ["created_at"])
    ): [User!]! @paginate(defaultCount: 10)

    todo(
      id: ID! @eq
    ): Todo @find

    todos(
      is_completed: Boolean @eq
    ): [Todo] @paginate(defaultCount: 10)
}

type Mutation{
  createTodo(
    input: CreateTodoInput! @spread
  ): Todo @create

  updateTodo(
    input: UpdateTodoInput! @spread
  ): Todo @update

  deleteTodo(
    id: ID!
  ): Todo @delete
}

input CreateTodoInput{
  userId: ID! @rename(attribute: "user_id") @rules(apply: ["exists:users,id"])
  title: String! @rules(apply: ["max:255"])
  note: String
  isCompleted: Boolean @rename(attribute: "is_completed")
  completedAt: DateTime @rename(attribute: "completed_at")
}

input UpdateTodoInput{
  id: ID!
  userId: ID @rename(attribute: "user_id") @rules(apply: ["exists:users,id"])
  title: String! @rules(apply: ["max:255"])
  note: String
  isCompleted: Boolean @rename(attribute: "is_completed")
  completedAt: DateTime @rename(attribute: "completed_at")
}

"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    lastname: String!

    "Unique email address."
    email: String!

    "When the email was verified."
    email_verified_at: DateTime

    todos: [Todo!]! @hasMany

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!
}

#import todo.graphql
